<?php

namespace ApiBundle\Service;


/**
 * Class used to get the matches for the players
 *
 * @author Theophane Fremond-Guilbault <tfremond@humanequation.co> | <theophane21@hotmail.com>
 *
 */
class GridGenerator
{
	private $difficulty;

	private $easyGrids = array(
    '070102090302860007004009560405000026020030080910000704061200300700083201050401070576142893392865417184379562435718926627934185918526734861257349749683251253491678',
    '032009040005001207000740085008056901600000004901270500360095000807300600020800410732589146485631297196742385278456931653918724941273568364195872817324659529867413',
    '700003804900002003002800000100050000470306085000040006000001300800200009301900008715693824984512763632874591168759432479326185523148976296481357847235619351967248',
    '620080401003600000000000308060702100040000070007903050706000000000008600904070082625387491893614725471529368368752149549861273217943856786235914152498637934176582',
    '060004000100006074097100060009300480700010002043009600070001930680200005000800020368574219125936874497182563219365487756418392843729651572641938681293745934857126',
    '000026000168700050090003600001050906000901000904030800009300010020009587000240000347526198168794253592813674871452936236981745954637821689375412423169587715248369',
    '000703050370800106050940000200000070530080092090000008000068030601007025040209000864713259379825146152946387218594673537681492496372518925168734681437925743259861',
    '509800030000050001000700840060028090150030072040610050093005000700060000020004509519846237874253961236791845367528194158439672942617358493185726785962413621374589',
    '000000829500200070240001000006009010102346907080100500000500048090002006835000000713465829569238471248971635376859214152346987984127563627593148491782356835614792',
    '000000307906830050000400008058006001203000905700300680600007000090042803807000000184265397976831254325479168458926731263718945719354682632587419591642873847193526'
 	 );

  	private $mediumGrids = array(
    '000609002007000105000507030006031250003050700028740900060405000704000300800103000135689472687324195249517638976831254413952786528746913361475829754298361892163547',
    '800014030070000905002006040410090200008060500005020013040600300301000050060380009856914732174832965932756148413598276728163594695427813249675381381249657567381429',
    '046000180000600040300004090050008009987000451400500020060100003030005000094000560546932187829671345371854296652418739987326451413597628265149873738265914194783562',
    '600070380082000000074900010007030000530701069000090700050007890000000650046050001695174382182563947374982516967435128538721469421896735253617894719248653846359271',
    '008200070426008009010090008000800290000146000087002000600020050200600941040009700938265174426718539715394628164873295592146387387952416679421853253687941841539762',
    '040620010305010002000508000030000201500701008109000070000302000900080304050067020748623915365914782291578436637859241524731698189246573416392857972185364853467129',
    '010000300070890500005700692000020036000506000360040000896001400002074080007000060219465378673892514485713692954128736721536849368947251896351427132674985547289163',
    '081000003000090180050401600000023001206000508800640000008206050093050000500000370781562493462397185359481627945823761236179548817645239178236954693754812524918376',
    '800005010305400700010030200080006020960000051020300090009040060006003908070600004842765319395412786617938245781596423963274851524381697139847562456123978278659134',
    '000007000010542078080900602030008000006495100000200080104009050260754010000600000342867591619542378587913642435178269826495137791236485174329856268754913953681724'
  	);

  	private $hardGrids = array( 
    '000012040050006108000980600001029000500468007000170400007051000305800090020690000876512349954736128213984675741329586532468917689175432497251863365847291128693754',
    '000002060200000847496005000004030070001907400050020300000200913189000004040100000873412569215396847496875132924531678631987425758624391567248913189763254342159786',
    '000103040080406050000005009009006870701000905038009100200300000050907010070204000695123748387496251142785369529631874761842935438579126214358697853967412976214583',
    '020074800040600207507000004203140000000000000000059701300000608904008050005420070126974835849635217537812964293147586751286493468359721372591648914768352685423179',
    '080029000000670800006053704000500007850060023100002000604280500008015000000340080781429365435671892296853714962538147857164923143792658614287539328915476579346281',
    '010000400004390065000200800000409008690805014500703000009002000720046500005000020213658479874391265956274831132469758697825314548713692369582147721946583485137926',
    '035042600021000740000090000300008004050203060200400007000060000096000310002830590735142689921685743648397125367918254854273961219456837183569472596724318472831596',
    '000069700002840060690500800010003609000000000708100050001002037020034100003610000184369725352847961697521843215483679946275318738196254861952437529734186473618592',
    '070516008005038000608002007060000100200040003004000060800100604000820900500364070472516398915738426638492517763285149259641783184973265827159634346827951591364872',
    '210000300003860500000003014040500700760000045001007020830600000007084900004000038218459367473861592956723814342516789769238145581947623835692471127384956694175238'
  	);

  	private $extremeGrids = array (
    '060700000700100068001540070006030090900601005070050300090014700510007004000005020265789431749123568381546972156438297923671845874952316698214753512397684437865129',
    '040090000100753094007002003080000056005000900410000070500100600370586009000070030843691725162753894957842163289317456735468912416925378524139687371586249698274531',
    '100400006000050087570000300000160730700302005013075000001000098680090000400008001132487956964253187578916324845169732796342815213875469351724698687591243429638571',
    '000800007004030500200506080005901003016000840700403100070308005001070200600002000569814327184237596237596481425981763316725849798463152972348615851679234643152978',
    '000920450000000000403005002047061200180040036006590710700400308000000000012039000678923451251684973493175862547361289189247536326598714765412398934856127812739645',
    '000009030000630981000000700094010308200304009701050260006000000143087000050400000518279436472635981369841725694712358285364179731958264826193547143587692957426813',
    '006072000300060000520040086090700008107000309200006070950080067000050002000290800846172593379568214521349786493715628167824359285936471952483167738651942614297835',
    '006013700000500032300409580008000005000948000700000200089602003270004000003190800856213794941587632327469581638721945512948376794356218189672453275834169463195827',
    '000109030130700006708003201900004010000000000080900007203800109600007082090502000542169738139728456768453291925674813376281945481935627253846179614397582897512364',
    '509004870800170000007006000080400900020709010005001060000500700000047001072600309519324876846175293237986145681452937324769518795831462168593724953247681472618359'
   );


	public function __construct($difficulty)
  {
      $this->difficulty = $difficulty;
  }

  
  public function getGrid() 
  {
  	$gridString = $this->getGridString();
  	$completedGrid = $this->getCompletedGrid($gridString);
  	$cleanGrid = $this->getCleanGrid($gridString);
  	return $this->shuffleGrids($completedGrid, $cleanGrid);
  }

  // returns randomly one the base grids depending on difficulty
  
   

	private function getGridString()
	{
      	$grid = '';
      	$gridIndex  = rand(0,9);

		switch ($this->difficulty) {
			case 'easy':
				$grid = $this->easyGrids[$gridIndex];
				//$grid = '076142893392865417184379562435718926627934185918526734861257349749683251253491678576142893392865417184379562435718926627934185918526734861257349749683251253491678';
				break;
			case 'medium':
				$grid = $this->mediumGrids[$gridIndex];
				break;
			case 'hard':
				$grid = $this->hardGrids[$gridIndex];
				break;
			case 'extreme':
				$grid = $this->extremeGrids[$gridIndex];
				break;
			case defaut:
		}
		return $grid;
  }
  //**************** GRID SHUFFLING FUNCTIONS********************

  private function shuffleGrids($completedGrid, $cleanGrid) 
  {
    $shuffledGrids = array();
    array_push($shuffledGrids, $cleanGrid, $completedGrid);

    // random number of random shuffle operation
    $nShuffles = rand(10,40); // 10 a 40
    for ($i=0; $i<$nShuffles; $i++) {
      $actionNumber = rand(0,3); // 0 a 3
      $row1;
      $row2;
      $col1;
      $col2;
      switch($actionNumber) {
        case 0:
          $row1 = rand(0,2) ;
          $row2 = rand(0,2) ;
          while($row1 == $row2) {
            $row2 = rand(0,2) ;
          }
          $shuffledGrids[0] = $this->shuffleSquareRows($shuffledGrids[0], $row1, $row2);
          $shuffledGrids[1] = $this->shuffleSquareRows($shuffledGrids[1], $row1, $row2);
          break;
        case 1:
          $col1 = rand(0,2) ;
          $col2 = rand(0,2) ;
          while($col1 == $col2) {
            $col2 = rand(0,2) ;
          }
          $shuffledGrids[0] = $this->shuffleSquareCols($shuffledGrids[0], $col1, $col2);
          $shuffledGrids[1] = $this->shuffleSquareCols($shuffledGrids[1], $col1, $col2);
          break;
        case 2:
          $rowSqu = rand(0,2);
          $row1 = $rowSqu*3 + rand(0,2) ;
          $row2 = $rowSqu*3 + rand(0,2) ;
          while($row1 == $row2) {
            $row2 = $rowSqu*3 + rand(0,2) ;
          }
          $shuffledGrids[0] = $this->shuffleRows($shuffledGrids[0], $row1, $row2);
          $shuffledGrids[1] = $this->shuffleRows($shuffledGrids[1], $row1, $row2);
          break;
        case 3:
          $colSqu = rand(0,2);
          $col1 = $colSqu*3 + rand(0,2) ;
          $col2 = $colSqu*3 + rand(0,2) ;
          while($col1 == $col2) {
            $col2 = $colSqu*3 + rand(0,2) ;
          }
          $shuffledGrids[0] = $this->shuffleCols($shuffledGrids[0], $col1, $col2);
          $shuffledGrids[1] = $this->shuffleCols($shuffledGrids[1], $col1, $col2);
          break;
        default:
          break;
      }
    }

    // random number of digit swap operations
    $nDigitShuffle = rand(2,7); // 2 a 7
    for ($i=0; $i<$nDigitShuffle; $i++) {
      $digit1 = rand(1,9);
      $digit2 = rand(1,9);
      while ($digit1 == $digit2) {
        $digit2 = rand(1,9);
      }
      $shuffledGrids[0] = $this->swapDigits($shuffledGrids[0], $digit1, $digit2);
      $shuffledGrids[1] = $this->swapDigits($shuffledGrids[1], $digit1, $digit2);
    }
    return $shuffledGrids;
  }

  private function shuffleSquareRows($grid , $row1, $row2) //row value between 0 and 2
  { 
    //console.log('---shuffleSquareRow---');

    $shuffledGrid = array();
    for($i = 0; $i< 9; $i++) {
      $row = array();
      $j = 0;
      if(($i-$i%3)/3 == $row1) {
        //console.log('cond 1');
        for($j = 0; $j< 9; $j++) {
          array_push($row,$grid[($row2-$row1)*3+$i][$j]);
        }
      }
      else if(($i-$i%3)/3 == $row2) {
        //console.log('cond 2');
        for($j = 0; $j< 9; $j++) {
          array_push($row,$grid[($row1-$row2)*3+$i][$j]);
        }
      }
      else {
        //console.log('cond 3');
        for($j = 0; $j< 9; $j++) {
          array_push($row,$grid[$i][$j]);
        }
      }
      array_push($shuffledGrid,$row);
    }
    return $shuffledGrid;
  }

  private function shuffleRows($grid, $row1, $row2) 
  {
    //console.log('---ShuffleRows---');
    $shuffledGrid = array();
    for($i = 0; $i< 9; $i++) {
      $row = array();
      $j = 0;
      if($i == $row1) {
        //console.log('cond 1');
        for($j = 0; $j< 9; $j++) {
          array_push($row,$grid[$row2][$j]);
        }
      }
      else if($i == $row2) {
        //console.log('cond 2');
        for($j = 0; $j< 9; $j++) {
          array_push($row,$grid[$row1][$j]);
        }
      }
      else {
        //console.log('cond 3');
        for($j = 0; $j< 9; $j++) {
          array_push($row,$grid[$i][$j]);
        }
      }

      array_push($shuffledGrid,$row);
    }
    return $shuffledGrid;
  }

  private function shuffleSquareCols($grid, $col1, $col2) //col value between 0 and 2
  { 
    //console.log('---shuffleSquareCols---');
    $shuffledGrid = array();

    for($i = 0; $i< 9; $i++) {
      $row = array();
      for($j = 0; $j< 9; $j++) {
        if(($j-$j%3)/3 == $col1) {
          //console.log('cond 1');
          array_push($row,$grid[$i][($col2-$col1)*3+$j]);
        }
        else if (($j-$j%3)/3 == $col2) {
          //console.log('cond 2');
          array_push($row,$grid[$i][($col1-$col2)*3+$j]);
        }
        else {
          //console.log('cond 3');
          array_push($row,$grid[$i][$j]);
        }

      }
      array_push($shuffledGrid,$row);
    }
    return $shuffledGrid;
  }

  private function shuffleCols ($grid, $col1, $col2) 
  {
    //console.log('---shuffleCols---');
    $shuffledGrid = array();

    for($i = 0; $i< 9; $i++) {
      $row = array();
      for($j = 0; $j< 9; $j++) {
        if($j == $col1) {
          //console.log('cond 1');
          array_push($row,$grid[$i][$col2]);
        }
        else if ($j == $col2) {
          //console.log('cond 2');
          array_push($row,$grid[$i][$col1]);
        }
        else {
          //console.log('cond 3');
          array_push($row,$grid[$i][$j]);
        }

      }
      array_push($shuffledGrid,$row);
    }
    return $shuffledGrid;
  }

  private function swapDigits($grid, $digit1, $digit2) 
  {
    //console.log('---swapDigits---');
    $shuffledGrid = array();
    for($i = 0; $i< 9; $i++) {
      $row = array();
      for($j = 0; $j< 9; $j++) {
        $val = $grid[$i][$j];
        if($val == $digit1) {
          array_push($row,(string)$digit2);
        }
        else if($val == $digit2) {
          array_push($row,(string)$digit1);
        }
        else {
          array_push($row,$val);
        }
      }
      array_push($shuffledGrid,$row);
    }
    return $shuffledGrid;
  }    
  private function getCompletedGrid($gridString) 
  {
    $comGridString = substr($gridString,81,81);

    return $this->parseStringToGrid($comGridString);
  }

  private function getCleanGrid($gridString) 
  {
    $cleanGridString = substr($gridString,0,81);
    return $this->parseStringToGrid($cleanGridString);
  }

  private function parseStringToGrid($string) 
  {
    $grid = array();
    for ($i = 0; $i<9; $i++) {
      $row = array();
      for ($j = 0; $j<9; $j++) {
        $val = $string[$i * 9 + $j];
        if($val == 0) {
        	array_push($row, ' ');
        }
        else {
          array_push($row, $val);
        }
      }
      array_push($grid, $row);
    }
    return $grid;
  }


}